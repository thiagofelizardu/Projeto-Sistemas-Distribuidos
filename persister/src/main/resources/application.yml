spring:
  application:
    name: persister

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

    listener:
      # Precisa ser BATCH para receber List<PaymentEvent>
      type: batch
      ack-mode: manual
      concurrency: 4
      missing-topics-fatal: false
      idle-between-polls: 0

    consumer:
      group-id: persister-group
      enable-auto-commit: false
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.example.common.event
        spring.json.type.mapping: >
          paymentAuthorizedEvent:com.example.common.event.PaymentAuthorizedEvent,
          paymentRejectedEvent:com.example.common.event.PaymentRejectedEvent
      max-poll-records: 1000
      fetch-min-bytes: 1048576         # 1MiB: agrega mais mensagens
      fetch-max-wait: 500              # at√© 500ms esperando agrupar

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:postgres}?reWriteBatchedInserts=true
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:a}
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      connection-timeout: 10000

  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
        jdbc:
          batch_size: 500
        order_inserts: true
        order_updates: true

app:
  kafka:
    topics:
      persist-in: payments.persist.in
      dlq:        payments.dlq
